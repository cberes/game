#version 130

uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

// input is output from the vertex shader
in vec3 toCameraVector;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec2 pass_textureCoords;
in float visibility;

out vec4 out_Color;

void main(void) {
	vec4 blendMapColor = texture(blendMap, pass_textureCoords);
	float backTextureAmount = 1 - blendMapColor.r - blendMapColor.g - blendMapColor.b;
	vec2 tiledCoords = pass_textureCoords * 40.0; // tile terrain
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	// diffuse lighting
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2); // use 0.2 instead of 0.0 to add ambient lighting
	vec3 diffuse = brightness * lightColor;

	// specular lighting
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	float nDot2 = dot(reflectedLightDirection, unitCameraVector);
	float specularFactor = max(nDot2, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 specular = reflectivity * dampedFactor * lightColor;

	out_Color = mix(vec4(skyColor, 1.0), vec4(diffuse, 1.0) * totalColor + vec4(specular, 1.0), visibility);
}