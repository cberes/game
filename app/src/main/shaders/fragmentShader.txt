#version 130

uniform vec3 lightColor[4];
uniform float reflectivity;
uniform float shineDamper;
uniform sampler2D textureSampler;
uniform vec3 skyColor;

// input is output from the vertex shader
in vec3 toCameraVector;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec2 pass_textureCoords;
in float visibility;

out vec4 out_Color;

void main(void) {
	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 unitNormal = normalize(surfaceNormal);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for (int i = 0; i < 4; ++i) {
		vec3 unitLightVector = normalize(toLightVector[i]);

		// diffuse lighting
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 diffuse = brightness * lightColor[i];
		totalDiffuse = totalDiffuse + diffuse;

		// specular lighting
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float nDot2 = dot(reflectedLightDirection, unitCameraVector);
		float specularFactor = max(nDot2, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		vec3 specular = reflectivity * dampedFactor * lightColor[i];
		totalSpecular = totalSpecular + specular;
	}

	// simple means of transparency useful for objects that are either fully transparent or fully opaque
	// but apparently it's not efficient?
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if (textureColor.a < 0.5) {
		discard;
	}

	// limit diffuse color to minimum of 0.2 for ambient lighting
	out_Color = mix(vec4(skyColor, 1.0), vec4(max(totalDiffuse, 0.2), 1.0) * textureColor + vec4(totalSpecular, 1.0), visibility);
}