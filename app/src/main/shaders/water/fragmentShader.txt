#version 140

const float waveStrength = 0.02;
const vec3 waterNormal = vec3(0.0, 1.0, 0.0);
const float reflectivity = 0.75;

uniform sampler2D dudvMap;
uniform float moveFactor;
uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;

in vec4 clipSpaceCoords;
in vec2 textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

void main(void) {
	// convert to device coordinates, then map to texture coordinates
	vec2 normDeviceCoords = clipSpaceCoords.xy / clipSpaceCoords.w / 2.0 + 0.5;

	// moveFactor creates the appearance of movement (because moveFactor is changed by the shader)
	// convert from [0.0,1.0] to [-1.0,1.0]
	// use waveStrength to lessen the noise
	vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0) * waveStrength;
	// sample DuDv map again for distortion in a second direction
	vec2 distortion2 = (texture(dudvMap, vec2(-textureCoords.x, textureCoords.y + moveFactor)).rg * 2.0 - 1.0) * waveStrength;
	vec2 totalDistortion = distortion1 + distortion2;

	// reflection is upside down, so invert y
	vec2 reflectionTextureCoords = vec2(normDeviceCoords.x, -normDeviceCoords.y) + totalDistortion;
	reflectionTextureCoords.x = clamp(reflectionTextureCoords.x, 0.001, 0.999);
	reflectionTextureCoords.y = clamp(reflectionTextureCoords.y, -0.999, -0.001);
	vec2 refractionTextureCoords = clamp(normDeviceCoords + totalDistortion, 0.001, 0.999);

	vec4 reflectionColor = texture(reflectionTexture, reflectionTextureCoords);
	vec4 refractionColor = texture(refractionTexture, refractionTextureCoords);

	// fresnel effect: mix colors based on how close the camera is to the water's surface
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFector = dot(viewVector, waterNormal);
	out_Color = mix(reflectionColor, refractionColor, pow(refractiveFector, reflectivity));

	// add some blue color
	out_Color = mix(out_Color, vec4(0.0, 0.25, 0.5, 1.0), 0.2);
}