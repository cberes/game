#version 140

const float density = 0.0035;
const float gradient = 2.5;

uniform vec3 lightPosition[4];
uniform mat4 projectionMatrix;
uniform mat4 transformationMatrix;
uniform mat4 viewMatrix;

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 toCameraVector;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out float visibility;

void main(void) {
	// convert vec3 to vec4
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	float distance = length(positionRelativeToCamera.xyz);
	gl_Position = projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = textureCoords;
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	for (int i = 0; i < 4; ++i) {
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz  - worldPosition.xyz;
	visibility = clamp(exp(-pow(distance * density, gradient)), 0.0, 1.0);
}