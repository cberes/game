#version 130

uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform sampler2D textureSampler;

// input is output from the vertex shader
in vec3 toCameraVector;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec2 pass_textureCoords;

out vec4 out_Color;

void main(void) {
	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	// diffuse lighting
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.0);
	vec3 diffuse = brightness * lightColor;

	// specular lighting
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	float nDot2 = dot(reflectedLightDirection, unitCameraVector);
	float specularFactor = max(nDot2, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 specular = reflectivity * dampedFactor * lightColor;

	out_Color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(specular, 1.0);
}