#version 140

uniform vec3 attenuation[4];
uniform vec3 lightColor[4];
uniform float reflectivity;
uniform float shineDamper;
uniform sampler2D modelTexture;
uniform sampler2D normalMap;
uniform vec3 skyColor;

in vec3 toCameraVector;
in vec3 toLightVector[4];
in vec2 pass_textureCoords;
in float visibility;

out vec4 out_Color;

void main(void) {
	vec4 normalMapValue = texture(normalMap, pass_textureCoords) * 2.0 - 1.0;
	vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitCameraVector = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for (int i = 0; i < 4; i++) {
		float distance = length(toLightVector[i]);
		float attfactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);

		// diffuse lighting
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 diffuse = brightness * lightColor[i] / attfactor;
		totalDiffuse = totalDiffuse + diffuse;

		// specular lighting
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float nDot2 = dot(reflectedLightDirection, unitCameraVector);
		float specularFactor = max(nDot2, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		vec3 specular = reflectivity * dampedFactor * lightColor[i] / attfactor;
		totalSpecular = totalSpecular + specular;
	}

	vec4 textureColor = texture(modelTexture, pass_textureCoords);
	if(textureColor.a < 0.5){
		discard;
	}

	// limit diffuse color to minimum of 0.2 for ambient lighting
	out_Color = mix(vec4(skyColor, 1.0), vec4(max(totalDiffuse, 0.2), 1.0) * textureColor + vec4(totalSpecular, 1.0), visibility);
}